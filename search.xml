<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>揭秘“合成氢动力水”</title>
      <link href="/2018/07/24/qingdonglishui/"/>
      <url>/2018/07/24/qingdonglishui/</url>
      <content type="html"><![CDATA[<p>最近朋友圈合成氢能源挺火的，我是不太相信的，所以特地去查了一些资料。当我查到入会费2980成为代理之后才可购买时，我就呵呵了，我又查了一下他们的盈利机制:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">一：全返奖励一个人都不推，交2980，返还2980，每日以积分的形式释放。推一个人，返还2980乘以2推荐两个人，返还2980乘以4推荐三个人，返还2980乘以6，6倍截止<br><br>二：晋级奖励一个人只需推荐两个人，如A和B，当AB两条线累计各达到六人，每月拿五千七固定工资。当AB两条线累计各达到十八人，每月拿一万一千七百固定工资。以此类推，最高每月拿117万。<br></code></pre></td></tr></table></figure><a id="more"></a><p>拿人头，发展下线，拿提成——–传销无疑！！！</p><p>前几天还有朋友跟我说只要4块钱一升，有不少人都在加，动力足，对车无损坏，真的无损伤吗？呵呵</p><p>我找了找资料，在网上翻到了一个记者调查视屏：</p><video data-src="http://pbmsgh6d0.bkt.clouddn.com/%E5%90%88%E6%88%90%E6%B0%A2%E5%8A%A8%E5%8A%9B%E6%B0%B4.mp4" poster="http://vimg3.ws.126.net/image/snapshot/2018/4/O/I/VDDGU4HOI.jpg" webkit-playsinline="" controls="true" src="http://pbmsgh6d0.bkt.clouddn.com/%E5%90%88%E6%88%90%E6%B0%A2%E5%8A%A8%E5%8A%9B%E6%B0%B4.mp4" style="width:100%"><br></video><p>根据视屏的说法并结合我在朋友圈看到的图片，（无色类似纯水）应该是甲醇勾兑蒸馏水之类的产品。</p><p>科普一下知识：</p><h3 id="甲醇基本知识"><a href="#甲醇基本知识" class="headerlink" title="甲醇基本知识"></a>甲醇基本知识</h3><p>甲醇（Methanol，CH3OH）是结构最为简单的饱和一元醇，CAS号为67-56-1或170082-17-4，分子量为32.04，沸点为64.7℃。无色液体，俗称工业酒精，可同水进行完全互溶，甲醇燃料也被国家鼓励推广，为防止不法商人将甲醇进行勾兑流入市场形成酒类销售，故将甲醇燃料加入少量汽油，西方国家添加蓝色用做汽车燃料进行防范。</p><p>同时，甲醇可用作清洗去油剂，MOS级主要用于分立器件，中、大规模集成电路，BV-Ⅲ级主要用于超大规模集成电路工艺技术。</p><p>通常甲醇是一种比乙醇更好的溶剂，可以溶解许多无机盐。亦可掺入汽油作替代燃料使用。20世纪80年代以来，甲醇用于生产汽油辛烷值添加剂甲基叔丁基醚、甲醇汽油、甲醇燃料，以及甲醇蛋白等产品，促进了甲醇生产的发展和市场需要。</p><p>甲醇不仅是重要的化工原料，而且还是性能优良的能源和车用燃料。甲醇与异丁烯反应得到MTBE（甲基叔丁基醚），它是高辛烷值无铅汽油添加剂，亦可用作溶剂。除此之外，还可制烯烃和丙烯，解决资源短缺问题。</p><p>甲醇可用于生产二甲醚，二甲醚除了在日用化工、制药、农药、染料、涂料等方面有广泛的用途，还具有方便清洁、十六烷值高、动力性能好、污染少。易加压为液体、易储存等燃料性能。甲醇和二甲醚按一定比例配制而成的新型液体燃料称为醇醚燃料。它的燃烧效率和热效率均高于液化气。</p><p>由于甲醇具有沸点低辛烷值高等特点，使得它作为燃料具有含氧量高、热值比汽油弱的特点，汽化潜热是汽油的3倍多。同时，由于甲醇燃料理化性能接近汽油，在汽油机上使用甲醇燃料，发动机不需做大的变动，甲醇与汽油相溶性较好，可实现各种比例掺烧。而且几十万吨/年的装置就可达到经济规模（合成油则至少应达到几百万吨/年规模），甲醇可以不必过分集中生产，便于企业投资兴建和产品输送，即使较长距离的输送，也比输煤和输气便利。再加上它是含氧化合物，燃烧完全，在汽车发动机中的能量利用效率高于汽油，其经济性很具有竞争力。</p><h4 id="甲醇燃料的优点："><a href="#甲醇燃料的优点：" class="headerlink" title="甲醇燃料的优点："></a>甲醇燃料的优点：</h4><p>节省石油、安全方便、动力性好、减少排放</p><h4 id="甲醇燃料的缺点："><a href="#甲醇燃料的缺点：" class="headerlink" title="甲醇燃料的缺点："></a>甲醇燃料的缺点：</h4><p>甲醇的汽化潜热高，易造成甲醇燃料的低温起动性能差，冬天需要采取相应措施；</p><p>甲醇与汽油混合形成共沸物，在甲醇15%配比附近甲醇汽油蒸汽压显著提高，当环境气温较高时甲醇汽油在油路中容易形成气阻，造成汽车供油不畅；</p><p>甲醇不完全燃烧易形成非常规污染排放物，其中甲醛的排放比常规汽油车排放高，容易造成汽车三元催化器中毒；</p><p>由于甲醇热值只有汽油一半不到，因此使用中、大比例甲醇汽油的汽车动力性能会受影响。</p><p>甲醇具有腐蚀性，对橡胶有溶胀作用，因此将甲醇汽油中往往要加入抗腐蚀、抗溶胀的添加剂；</p><p>甲醇是优良溶剂，进入汽缸后会破坏缸壁油膜，容易造成汽缸壁——活塞环摩擦副的异常磨损；</p><p>甲醇不完全燃烧产物中含有酸性物质，易造成发动机润滑油提前酸化。</p><h3 id="什么是醇醚燃料？"><a href="#什么是醇醚燃料？" class="headerlink" title="什么是醇醚燃料？"></a>什么是醇醚燃料？</h3><p>甲醇+水（蒸馏水）+催化剂 ==形成醇醚燃料<br>醇醚燃料就是由煤（包括原煤、煤层气、焦炉煤气等）通过气化合成低碳含氧燃料——甲醇、二甲醚（简称醇醚燃料）等车用清洁替代汽油、柴油的燃料。包括甲醇燃料、二甲醚燃料。</p><h4 id="醇醚燃料特点"><a href="#醇醚燃料特点" class="headerlink" title="醇醚燃料特点"></a>醇醚燃料特点</h4><p>甲醇作为燃料始于上世纪七十年代的两次石油危机之后，其特点首先是完全的可替代性。</p><p>甲醇燃料是理化性能接近汽柴油的液体燃料，使用方便，辛烷值高，相当于112。</p><p>甲醇比汽油安全、环保；可做实验；气罐高压缩气体，爆炸是炸药的6倍，气罐进空气超过一定量也爆炸；甲醇液体、常压，并可用水稀释，最坏是着火而不是爆炸。</p><p>只要是电喷汽油车都可以改智能双燃料控制（3～12缸都可以）！或烧天然气车都可以烧甲醇！甲醇汽车迎来发展春天，必须专业改装！比气安全动力好、更省、续航能力强，改装方案多等优点。</p><p>甲醇汽车改装，甲醇燃料市面上99%都是简易改装，车烧甲醇不是加个所谓的控制器就是甲醇汽车改装，要不车厂早就自己加上了。甲醇如果简单的勾兑就可以使用，那3桶油早就做了。</p><p>必须专业改装智能汽车双燃料控制系统，要不必定导致汽车严重损坏。</p><p>加注甲醇燃料需注意以下事项：</p><p>甲醇（水性导电能力强，汽油导电差。车烧甲醇必须用耐水油泵、液位器！甲醇避免被酸性、腐蚀性液体污染（罐车只做水清洗，不做蒸灌处理）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>甲醇燃料是可以加的，但是无损吗？如果你的汽车没有按照甲醇使用进行正确改装的话，100%告诉你肯定会有损害的，对于普通汽车来说，使用低比例成品油无须对发动机和装置进行改造，可直接使用，但是朋友圈这种“合成氢动力水”甲醇含量高达85%以上，必须对汽车的燃油系统进行改造。甲醇燃料会对未进行改造的汽车燃油系统产生腐蚀效果，影响汽车寿命！我们平常喝97#汽油的车子如果长期加92#的话都会产生影响，更何况换了一种全新的燃料呢？后果就是就跟我们人一样，消化不良，发动机缸裂，燃料在机箱里面燃烧不正常，对汽车造成不可逆的损害,想去加这个的，悠着点吧！！！</p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 合成氢动力水 </tag>
            
            <tag> 汽车新型燃料 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>内网穿透利器FRP</title>
      <link href="/2018/07/23/frp/"/>
      <url>/2018/07/23/frp/</url>
      <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p><a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">Frp</a> 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。</p><p>还有一个内网穿透工具叫做Ngrok，提供同样的功能，但是Frp使用更简单。</p><h2 id="所需环境"><a href="#所需环境" class="headerlink" title="所需环境"></a>所需环境</h2><p>一台VPS(我的是Google VM实例，系统Debian 8 64位)</p><p>一个域名,可选，最好有比如 abc.com，要不然得用ip来进行访问了</p><a id="more"></a><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="域名设置-可选"><a href="#域名设置-可选" class="headerlink" title="域名设置[可选]"></a>域名设置[可选]</h3><p>域名配置是可选的，不配置也没关系，但是为了方便访问，还是配置一个比较好，去域名商控制台绑定一个二级域名就可以，假设域名叫做abc.com, 要设置的二级域名叫做frp.abc.com,新增两条A记录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">A   frp.abc.com     **.**.**.** (ip)<br>A   *.frp.abc.com   **.**.**.** (ip)<br></code></pre></td></tr></table></figure><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p><a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">下载地址</a> 找一个适合自己vps的安装包，我选择的是<code>frp_0.20.0_linux_amd64.tar.gz</code></p><p>复制安装包的地址，在vps上输入：</p><p><code>wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_arm64.tar.gz</code> 进行安装包的下载</p><p>然后解压缩：</p><p><code>tar -zxvf frp_0.20.0_linux_arm64.tar.gz</code></p><p><code>cd frp_0.20.0_linux_arm64.tar.gz</code></p><p>目录里面应该有这些内容：</p><p><img src="http://pbmsgh6d0.bkt.clouddn.com/frp-dir.png" alt="Frp"></p><p>配置 frps.ini 文件</p><p><code>vim frps.ini</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[common]<br>bind_port = 7000<br>vhost_http_port = 80<br>vhost_https_port = 443<br>dashboard_port = 8088<br>dashboard_user = 用户名<br>dashboard_pwd = 密码<br>privilege_token = token<br>log_file = ./frps.log<br>log_level = info<br>[web1]<br>type = http<br>custom_domains = web1.abc.com<br>auth_token = token<br></code></pre></td></tr></table></figure><p>用户名、密码、token自行填写,[web1] 名字任意，但是客户端配置的时候必须跟服务器是一致的，这里写web1的话，客户端配置中也得写web1，custom_domains 也任意，同理服务端和客户端也必须一致。</p><p>启动服务：</p><p><code>sudo nohup ./frps -c ./frps.ini &amp;</code></p><p>因为vhost_http_port 和 vhost_https_port 我们绑定的是1024 以下的端口，所以必须要有root权限，否则会报permission deney的错误。</p><p>开启自启动：</p><p><code>vim /etc/rc.local</code></p><p>在 exit 0 之前增加：</p><p><code>sudo nohup /home/luofeng0603/frp_0.20.0_linux_amd64/frps -c /home/luofeng0603/frp_0.20.0_linux_amd64/frps.ini &amp;</code></p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>还是去上面那个下载地址，选择适合自己的客户端，比如我的windows我下的这个：</p><p><code>frp_0.20.0_windows_amd64.zip</code></p><p>解压缩：</p><p>目录里面应该是这些内容：</p><p><img src="http://pbmsgh6d0.bkt.clouddn.com/frp-win.png" alt="frp-win"></p><p>编辑 frpc.ini 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs undefined">[common]<br>server_addr = VPS的IP<br>server_port = 7000<br>privilege_token = 服务端token<br>login_fail_exit = false<br><br>[ssh]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br>remote_port = 6000<br><br>[web1]<br>type = http<br>local_port = 80<br>custom_domains = web1.frp.abc.com<br>auth_token = web1的token<br></code></pre></td></tr></table></figure><p>server_addr：   填写vips的IP地址</p><p>privilege_token： 填写服务端token</p><p>web1：  名字和服务端一致</p><p>local_port：    填写你本地web服务器的端口</p><p>cutom_domains：     和服务端一致</p><p>auth_token：        和服务端一致</p><p>配置完毕，进行启动，在frp目录中打开windows命令行工具：</p><p><img src="http://pbmsgh6d0.bkt.clouddn.com/frp-win-success.png" alt="frp-win-success">;</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动本地Wamp服务器，在浏览器中输入：<code>web1.frp.abc.com</code>  成功打开wamp Info页面。</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FRP </tag>
            
            <tag> 内网穿透 </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html5shiv.js和respond.js</title>
      <link href="/2018/07/21/respond/"/>
      <url>/2018/07/21/respond/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;在html页面中经常看到引入了下面两个文件：</p><pre><code>&lt;script src=&quot;./js/html5shiv.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;./js/respond.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>&emsp;&emsp;其中 html5shiv 可以让不支持html5的浏览器支持html5的新增标签，<em>IE 9</em> 支持html5，但是其以下的并不支持。</p><p>&emsp;&emsp;respond.js 是一个快速轻量的 <em>polyfill</em> ， 用来为 IE6-8 以及其他不支持 CSS3 媒体查询的浏览器提供 <em>min-width</em> 和 <em>max-width</em> 特性，实现响应式网页设计。</p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中!的神奇作用</title>
      <link href="/2018/07/20/js!/"/>
      <url>/2018/07/20/js!/</url>
      <content type="html"><![CDATA[<h2 id="JS中！的神奇作用"><a href="#JS中！的神奇作用" class="headerlink" title="JS中！的神奇作用"></a>JS中！的神奇作用</h2><p>&emsp;&emsp;今天翻阅别人的源代码的时候，看到一个神奇的用法。</p><p>&emsp;&emsp;<code>!function ($){...}(jQuery)</code></p><p>&emsp;&emsp;!正常来讲是一元操作符非，作者为何在一个函数前面加个非呢？为此我去翻阅了一些资料，发现其中还是有一些门道的。<br><a id="more"></a><br>&emsp;&emsp;js中匿名函数的一般用法是下面两种：</p><pre><code>(function(){alert(&apos;a&apos;);})();(function(){alert(&apos;a&apos;);}());</code></pre><p>&emsp;&emsp;是用括号来实现的，如果你写成下面这样的话，是无法执行的：</p><pre><code>function(){alert(&apos;a&apos;)}();</code></pre><p>&emsp;&emsp;因为这个代码把js解释器搞混了，前面function(){alert(‘a’)} 是函数声明，要调用申明的函数必须使用<code>a();</code>这种形式，所以自然无法执行。</p><p>&emsp;&emsp;而括号将一个函数声明转化成了一个表达式，解析器不再以函数声明的方式处理函数a，而是作为一个函数表达式处理。</p><p>&emsp;&emsp;所以<code>(function(){alert(&#39;a&#39;);})();</code>在js眼里等同于:</p><pre><code>var a = function(){alert(&apos;a&apos;);};a();</code></pre><p>&emsp;&emsp;知道这个就好理解了，<strong>其实任何能让一个函数申明变成函数表达式的符号，都可以替代()的作用。</strong>! 就是其中一个，当然，聪明的你肯定也想到了，+-等等也是可以的。</p><pre><code>!function(){alert(&apos;a&apos;);}();+function(){alert(&apos;a&apos;);}();-function(){alert(&apos;a&apos;);}();~function(){alert(&apos;a&apos;);}();</code></pre><p>&emsp;&emsp;至于作者为什么要用!而不是其他符号呢？这个有人解释可能更多的是一种习惯问题，最正常的写法还是使用 (), ! 可能让人看代码的时候更容易理解吧，另外可以少些一个字符（然而并没有什么卵用）。</p>]]></content>
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo搭建个人博客系列(一)：安装</title>
      <link href="/2018/07/11/hexo1/"/>
      <url>/2018/07/11/hexo1/</url>
      <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h2><p><code>以下所有工作，环境默认Win10</code></p><ul><li>安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li>安装 <a href="http://cmder.net/" target="_blank" rel="noopener">Cmder完整版</a> 或者安装 <a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git for Window</a></li><li>注册 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 并新建Gitpage专用仓库</li><li>安装 <a href="https://hexo.io/" target="_blank" rel="noopener">安装Hexo</a></li></ul><a id="more"></a><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤:"></a>具体步骤:</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></h3><p>进入官网下载稳定版本</p><p><img src="http://pbmsgh6d0.bkt.clouddn.com/download-node.png" alt="download node.js"></p><p>安装很简单，一路next</p><p><img src="http://pbmsgh6d0.bkt.clouddn.com/run-node.png" alt="run-node"></p><p><img src="http://pbmsgh6d0.bkt.clouddn.com/install-node.png" alt="install-node"></p><p>安装完成之后，检测一下,出现下图版本提示，就是成功了</p><blockquote><p>node –version</p></blockquote><p><img src="http://pbmsgh6d0.bkt.clouddn.com/node-version.png" alt="node-version"></p><p>测试一下npm是否安装成功，npm是Node包管理工具，安装node的时候是默认集成的，出现下图提示就是成功的</p><blockquote><p>npm -v</p></blockquote><p><img src="http://pbmsgh6d0.bkt.clouddn.com/npm-version.png" alt="npm-version"></p><p>npm默认源在国外，速度很慢，可以换成国内淘宝镜像源</p><blockquote><p>npm config set registry <a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a></p></blockquote><h3 id="安装-Cmder完整版-或者安装-Git-for-Window"><a href="#安装-Cmder完整版-或者安装-Git-for-Window" class="headerlink" title="安装 Cmder完整版 或者安装 Git for Window"></a>安装 <a href="http://cmder.net/" target="_blank" rel="noopener">Cmder完整版</a> 或者安装 <a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git for Window</a></h3><p><code>Cmder 是Windows下一款很好的命令行工具，用来替代Windows自带的cmd是再好不过了，支持Linux下的绝大部分命令，完整版集成了git，方便使用。</code></p><p>官网下载<br><img src="http://pbmsgh6d0.bkt.clouddn.com/download-cmder.png" alt="download-cmder"></p><p>无需安装，解压之后即可使用<br><img src="http://pbmsgh6d0.bkt.clouddn.com/cmder-dir.png" alt="cmder-dir"></p><p>[可选操作]：</p><ol><li><p>添加至环境变量：Win + R 输入cmder 即可打开</p><p> <img src="http://pbmsgh6d0.bkt.clouddn.com/cmder-home.png" alt="cmder-home"></p><p> <img src="http://pbmsgh6d0.bkt.clouddn.com/cmder-path.png" alt="cmder-path"></p></li><li><p>添加至右键菜单：右击 Windows 图标，选择命令提示符(管理员)</p><p> <img src="http://pbmsgh6d0.bkt.clouddn.com/win-rightclick.png" alt="win-rightclick"></p><p> 进入cmder目录<br> 输入：</p><blockquote><p>Cmder.exe /REGISTER ALL</p></blockquote><p> <img src="http://pbmsgh6d0.bkt.clouddn.com/cmder-rightmouse.png" alt="cmder-rightmouse"></p></li></ol><h3 id="注册Github-并新建仓库"><a href="#注册Github-并新建仓库" class="headerlink" title="注册Github 并新建仓库"></a>注册<a href="https://github.com/" target="_blank" rel="noopener">Github</a> 并新建仓库</h3>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IKBC POKER 最适合程序员的键位编程</title>
      <link href="/2018/07/10/ikbc-poker/"/>
      <url>/2018/07/10/ikbc-poker/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;我对机械键盘的印象还一直停留在打游戏，一般打游戏才用机械键盘吧，游戏用黑轴，这个我还是知道的，不过写代码有必要用机械键盘吗？</p><p>&emsp;&emsp;同事推荐入坑IKBC，樱桃轴，价钱适中，在试用了同事的IKBC 青轴几天之后，果断觉得再也不想用回薄膜键盘了，手感差的也太大了吧？！<br><a id="more"></a><br>&emsp;&emsp;不过他的青轴有点不太适合我：</p><ul><li>81键，略大，自带钢板，很重，不方便携带</li><li>青轴键程偏长，写代码久了有点儿累</li><li>声音略大，时间长了有点烦人</li><li>键线不分离</li><li>不支持自定义编程</li></ul><p>在另外一个同事的安利下，入了IKBC POKER 茶轴，小巧轻便，键线分离，键程适中，长时间写代码也不会觉得很累，61键，支持自定义编程。</p><p><img src="http://pbmsgh6d0.bkt.clouddn.com/20160721200123668.png" alt="ikbc poker"></p><p>写代码当然要先编一下适合自己的键啦~</p><p>我的手略大，双手自然放置在键盘上的时候，右手稍微往右上移一下，小鱼际正好能搁在PN键位上。</p><p><img src="http://pbmsgh6d0.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20180710184721.png" alt="小鱼际"></p><h2 id="具体键位编程："><a href="#具体键位编程：" class="headerlink" title="具体键位编程："></a>具体键位编程：</h2><ul><li>FN + W : 上</li><li>FN + S : 下</li><li>FN + A : 左</li><li>FN + D : 右</li><li>FN + F : Ctl + 左</li><li>FN + G ：Ctl + 右</li><li>FN + R :  Home</li><li>FN + V : End</li><li>FN + T : PgUp</li><li>FN + B : PgDn</li><li>FN + Esc : `</li><li>FN + Shift : ~</li><li>FN + I : Backspace</li><li>FN + O : DEL</li><li>FN + Z : [</li><li>FN + X : ]</li></ul><h2 id="编程方法："><a href="#编程方法：" class="headerlink" title="编程方法："></a>编程方法：</h2><ol><li><code>FN + 右Ctl</code>，进入编程模式（空格右灯闪烁）</li><li>按想要编程的键（空格右灯长亮）</li><li>按编程内容，然后按一下PN（空格右灯再次闪烁）</li><li>重复2、3步骤可继续编程</li><li>按 <code>FN + 右Ctl</code> 退出编程模式</li></ol><p>刚开始可能会有点不适应，手老是不自觉的要去摸小键盘，熟悉之后就好多了，一个星期大概就能熟练了。我现在写代码，手基本上不用离开键盘的，非常方便。</p>]]></content>
      
      <categories>
          
          <category> 外设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 键盘 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;其实我是不想写博客的，因为我实在是太忙了（哦不，太懒了），有了孩子之后，留给自己的时间就更少了，本来以前晚上回去还能弄弄电脑，提升一下自我，现在基本上回家抱抱孩子，跟他玩一会就10点多了，年纪大了，一到11点就困的不行，所以真的是有心无力呀。</p><p> &emsp;&emsp;不过话又说回来，时间就像那啥,挤挤总是有的，更何况现在工作中遇到的坑实在是太多了，很多坑往往之前跳过，现在遇到了就是想不起来，又跳进去了，长此以往，累的够呛，真的是需要有一个博客存放我跳坑的经验呀！</p><p> &emsp;&emsp;关于到底在哪里写博客这个问题真是让我纠结了半天，作为一个程序猿，必须要写出自己的逼格呀，所以我最后选了<a href="https://pages.github.com/" target="_blank" rel="noopener">GitPage</a> 来写博客。</p><p> &emsp;&emsp;原因无他，可以装X，WordPress简单是简单，关键是不能体现我的逼格呀，哈哈，所以折腾了几天用Hexo弄了这个博客，其中也是一把辛酸泪，好一顿折腾，具体去翻我的博文。</p><p> &emsp;&emsp;我的工作涉及略杂，主要是php，主写各种后台，也写微信小程序，有的时候也写前端页面，谈不上哪一方向精通，但是各类技术都略有涉猎，平常见到新知识有时间就学习一下，不针对某个方面。</p><p> &emsp;&emsp;目前除了写代码，大部分时间贡献出来给我的Swtich了，公司程序猿基本人手一个，玩的都是2017年神作塞尔达，哈哈，就问你6不6？来张合照秀一下。<br><img src="http://pbmsgh6d0.bkt.clouddn.com/IMG_20180621_131604.jpg" alt="公司程序猿的switch"><br> &emsp;&emsp;花了几百块钱买了luofengblog.com这个域名，我是想既然花钱了，是不是应该珍惜一点，多坚持一下，不想弄博客，就是怕自己坚持不了，免费的东西总觉得来之太易不太容易坚持，希望花点钱且写且坚持，顺便锻炼一下写作！</p>]]></content>
    </entry>
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
